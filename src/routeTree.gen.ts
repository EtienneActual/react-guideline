/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StarWarsImport } from './routes/star-wars'
import { Route as SocketImport } from './routes/socket'
import { Route as CoinsImport } from './routes/coins'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StarWarsRoute = StarWarsImport.update({
  id: '/star-wars',
  path: '/star-wars',
  getParentRoute: () => rootRoute,
} as any)

const SocketRoute = SocketImport.update({
  id: '/socket',
  path: '/socket',
  getParentRoute: () => rootRoute,
} as any)

const CoinsRoute = CoinsImport.update({
  id: '/coins',
  path: '/coins',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/coins': {
      id: '/coins'
      path: '/coins'
      fullPath: '/coins'
      preLoaderRoute: typeof CoinsImport
      parentRoute: typeof rootRoute
    }
    '/socket': {
      id: '/socket'
      path: '/socket'
      fullPath: '/socket'
      preLoaderRoute: typeof SocketImport
      parentRoute: typeof rootRoute
    }
    '/star-wars': {
      id: '/star-wars'
      path: '/star-wars'
      fullPath: '/star-wars'
      preLoaderRoute: typeof StarWarsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coins': typeof CoinsRoute
  '/socket': typeof SocketRoute
  '/star-wars': typeof StarWarsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coins': typeof CoinsRoute
  '/socket': typeof SocketRoute
  '/star-wars': typeof StarWarsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/coins': typeof CoinsRoute
  '/socket': typeof SocketRoute
  '/star-wars': typeof StarWarsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/coins' | '/socket' | '/star-wars'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/coins' | '/socket' | '/star-wars'
  id: '__root__' | '/' | '/coins' | '/socket' | '/star-wars'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoinsRoute: typeof CoinsRoute
  SocketRoute: typeof SocketRoute
  StarWarsRoute: typeof StarWarsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoinsRoute: CoinsRoute,
  SocketRoute: SocketRoute,
  StarWarsRoute: StarWarsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coins",
        "/socket",
        "/star-wars"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/coins": {
      "filePath": "coins.tsx"
    },
    "/socket": {
      "filePath": "socket.tsx"
    },
    "/star-wars": {
      "filePath": "star-wars.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
